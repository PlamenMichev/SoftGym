@model SoftGym.Web.ViewModels.Trainers.MyTrainersViewModel

@using SoftGym.Web.ViewModels.Trainers
@using SoftGym.Data.Models
@using Microsoft.AspNetCore.Identity
@using SoftGym.Common
@{
    if (this.User.IsInRole(GlobalConstants.TrainerRoleName))
    {
        this.ViewData["Title"] = "My Clients";
        this.ViewData["NullError"] = "You have no clients!";
    }
    else
    {
        this.ViewData["Title"] = "My Trainers";
        this.ViewData["NullError"] = "You have no trainers!";
    }
}


@inject UserManager<ApplicationUser> userManager

<h2 class="text-center m-3">@this.ViewData["Title"]</h2>
<hr />

@if ((this.Model.Trainers == null || this.Model.Trainers.Any() == false) &&
   (this.Model.Clients == null || this.Model.Clients.Any() == false))
{

    <div class="alert alert-info col-md-12 text-center" role="alert">
        @this.ViewData["NullError"]
    </div>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <input id="userId" name="userId" value="" hidden>
            <div class="img-fluid">
                <div class="container-fluid h-100">
                    <div class="row justify-content-center h-100">
                        <div class="card-chat card">
                            <div class="card-header msg_head">
                                <div class="d-flex bd-highlight">
                                    <div class="img_cont">
                                        <img src="" class="rounded-circle user_img"
                                             id="userImage">
                                    </div>
                                    <div class="user_info">
                                        <span id="userName"></span>
                                        <p id="messagesCount">1767 Messages</p>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body msg_card_body">
                            </div>
                            <div class="card-footer">
                                <div class="input-group">
                                    <div class="input-group-append">
                                        <span class="input-group-text attach_btn"><i class="fas fa-paperclip"></i></span>
                                    </div>
                                    <textarea name="" class="form-control type_msg" placeholder="Type your message..."></textarea>
                                    <div class="input-group-append">
                                        <span class="input-group-text send_btn"><i class="fas fa-location-arrow"></i></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <ul class="list-group">
                @if (this.User.IsInRole(GlobalConstants.TrainerRoleName))
                {
                    @foreach (var client in Model.Clients)
                    {
                        <div class="row mb-3">
                            <li class="list-group-item col-md-8">
                                <a onclick="changeUserData('@client.Id')" href="#" class="row">
                                    <div class="col-md-2 img-fluid d-flex">
                                        <img src="@client.ProfilePictureUrl" alt="@client.FirstName @client.LastName" class="w-100" />
                                    </div>
                                    <div class="col-md-10">
                                        @client.FirstName @client.LastName
                                    </div>
                                </a>
                            </li>
                            <div class="col-md-4 row">
                                <form asp-action="RemoveClient" asp-controller="Clients" asp-area="Trainers" method="post" class="col-md-4" id="deleteForm">
                                    <input type="text" name="clientId" value="@client.Id" hidden />
                                    <button type="submit" class="btn" style="cursor: pointer" title="Remove From My Trainers"><i class="fas fa-user-times"></i></button>
                                </form>
                                <button data-toggle="modal" data-target="#a@(client.Id)a" class="p-2 float-right btn btn-primary col-md-8" style="cursor: pointer">Contacts</button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    @foreach (var trainer in Model.Trainers)
                    {
                        <div class="row mb-3">
                            <li class="list-group-item col-md-8">
                                <a onclick="changeUserData('@trainer.Id')" href="#" class="row">
                                    <div class="col-md-2 img-fluid d-flex">
                                        <img src="@trainer.ProfilePictureUrl" alt="@trainer.FirstName @trainer.LastName" class="w-100" />
                                    </div>
                                    <div class="col-md-10">
                                        @trainer.FirstName @trainer.LastName - @trainer.ClientsCount clients
                                    </div>
                                </a>
                            </li>
                            <div class="col-md-4 row">
                                <form asp-action="RemoveTrainer" asp-controller="Trainers" asp-area="" method="post" class="col-md-4" id="deleteForm">
                                    <input type="text" name="Id" value="@trainer.Id" hidden />
                                    <button type="submit" class="btn" style="cursor: pointer" title="Remove From My Trainers"><i class="fas fa-user-times"></i></button>
                                </form>
                                <button data-toggle="modal" data-target="#a@(trainer.Id)a" class="p-2 float-right btn btn-primary col-md-8" style="cursor: pointer">Contacts</button>
                            </div>
                        </div>
                    }
                }
            </ul>
        </div>
    </div>
    @section Scripts {
        <script>
    @{var user = await this.userManager.GetUserAsync(this.User);}

        var pictureElement = $("#userImage");
        var nameElement = $("#userName");
        var idElement = $("#userId");
        $(window).load(function () {
            @if (Model.Trainers != null)
            {
                @if (!Model.Trainers.Any()) {
                    @: return;
                }
            }

            var otherUserId;
            @if (this.User.IsInRole(GlobalConstants.TrainerRoleName)) {
                @: otherUserId = "@Model?.Clients.Select(x => x.Id).FirstOrDefault()";
            }
            else
            {

                @: otherUserId = "@Model?.Trainers.Select(x => x.Id).FirstOrDefault()";
            }

            if (otherUserId) {
                $("#userId").attr('value', otherUserId);
                $.ajax({
                type: "GET",
            url: "/Users/GetChatData",
            data:
                    {
                    id: otherUserId
            },
                success: function (data) {
                        pictureElement.attr('src', data.profilePictureUrl);
                        nameElement.text(data.firstName + " " + data.lastName);
                        idElement.attr('value', data.id);
                        getChat("@user.Id", data.id);
                    }
                });
            }
        });

        function changeUserData(id) {
            $.ajax({
            type: "GET",
            url: "/Users/GetChatData",
            data:
            {
                id: id
            },
                success: function (data) {
                    pictureElement.attr('src', data.profilePictureUrl);
                    nameElement.text(data.firstName + " " + data.lastName);
                    idElement.attr('value', data.id);
                    getChat("@user.Id", data.id);
                }
            });
        }

         function SaveMessage (messageInput) {
            let inputModel = JSON.stringify({
                UserId: idElement.val(),
                Message: messageInput
            });

        var token = $("#deleteForm input[name=__RequestVerificationToken").val();

             $.ajax({
                 type: "POST",
                 url: "/api/Messages",
                 contentType: "application/json",
                 headers: { "X-CSRF-TOKEN": token },
                 data: inputModel,
                 dataType: "json",
                success: function (data) {
                }
            });
        }

        function getChat(senderIdValue, recieverIdValue) {
            console.log(senderIdValue, recieverIdValue);
            $("div.card-body").empty();
             var token = $("#deleteForm input[name=__RequestVerificationToken").val();

             $.ajax({
                 type: "GET",
                 url: "/api/Messages",
                 headers: { "X-CSRF-TOKEN": token },
                 data: {
                senderId: senderIdValue,
                recieverId: recieverIdValue
            },
                 success: function (data) {
                     $("#messagesCount").text(data.count + " Messages");
                     for (var i = 0; i < data.messages.length; i++) {
                         let message = data.messages[i];
                         var today = new Date();
                         let date = new Date(message.createdOn);
                         let currentDate = new Date(date + "UTC");
                         if (message.senderId == "@user.Id") {
                             let messageElement = `
                            <div class="d-flex justify-content-end mb-4">
                                <div class="msg_cotainer_send">
                                    <div class="">
                                        ${message.content}
                                    </div>
                                    <span class="msg_time_send mt-2">
                            ${currentDate.getHours().toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}
                           :${currentDate.getMinutes().toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}
                           ${date.getDate() != today.getDate() ? "," + currentDate.toLocaleDateString('en-us', { weekday: "long" }) : ""}</span >
                                </div>
                                <div class="img_cont_msg">
                                    <img src="${message.senderProfilePictureUrl}" class="rounded-circle user_img_msg">
                                </div>
                            </div>`
                             $("div.card-body").append(messageElement);
                             $('div.card-body').scrollTop($('div.card-body')[0].scrollHeight - $('div.card-body')[0].clientHeight);
                         } else {
                             let messageElement = `
                            <div class="d-flex justify-content-start mb-4">
                                <div class="img_cont_msg">
                                    <img src="${message.senderProfilePictureUrl}" class="rounded-circle user_img_msg">
                                </div>
                                <div class="msg_cotainer">
                                        <div>
                                        ${message.content}
                                        </div>
                                    <span class="msg_time mt-2">
                            ${currentDate.getHours().toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}
                           :${currentDate.getMinutes().toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}
                            ${date.getDate() != today.getDate() ? "," + currentDate.toLocaleDateString('en-us', { weekday: "long" }) : ""}</span>
                                </div>
                            </div>`
                             $("div.card-body").append(messageElement);
                             $('div.card-body').scrollTop($('div.card-body')[0].scrollHeight - $('div.card-body')[0].clientHeight);
                         }
                     }
                }
            });
        }


        var connection =
            new signalR.HubConnectionBuilder()
                .withUrl("/chat")
                .build();

        connection.on("RecieveMessage", function (message, profilePictureUrl) {
            var date = new Date();
            var messageElement = `
                            <div class="d-flex justify-content-start mb-4">
                                <div class="img_cont_msg">
                                    <img src="${profilePictureUrl}" class="rounded-circle user_img_msg">
                                </div>
                                <div class="msg_cotainer">
                                        <div>
                                        ${message}
                                        </div>
                                    <span class="msg_time mt-2">
${date.getHours().toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}
:${date.getMinutes().toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}</span>
                                </div>
                            </div>`
            $("div.card-body").append(messageElement);
            $('div.card-body').scrollTop($('div.card-body')[0].scrollHeight - $('div.card-body')[0].clientHeight);
        });

        connection.on("SendMessage", function (message) {
            var date = new Date();
            var messageElement = `
                            <div class="d-flex justify-content-end mb-4">
                                <div class="msg_cotainer_send">
                                    <div class="">
                                        ${message}
                                    </div>
                                    <span class="msg_time_send mt-2">
${date.getHours().toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}
:${date.getMinutes().toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}</span>
                                </div>
                                <div class="img_cont_msg">
                                    <img src="@user.ProfilePictureUrl" class="rounded-circle user_img_msg">
                                </div>
                            </div>`
            $("div.card-body").append(messageElement);
            $('div.card-body').scrollTop($('div.card-body')[0].scrollHeight - $('div.card-body')[0].clientHeight);
            SaveMessage(message);
        });

        $(".send_btn").click(function () {
            var message = $("textarea").val();
            var userId = $("#userId").val();
            var callerId = "@user.Id";

            var model = {
                message: message,
                userId: userId,
                callerId: callerId
            }
            connection.invoke("Send", model);
            $("textarea").val("");
            $("textarea").focus();
        });

        connection.start();
        </script>
    }

    @if (Model.Trainers != null)
    {
        @foreach (var trainer in Model.Trainers)
        {
            var viewModel = new TrainerViewModel()
            {
                Id = trainer.Id,
                FirstName = trainer.FirstName,
                LastName = trainer.LastName,
                PhoneNumber = trainer.PhoneNumber,
                Email = trainer.Email,
            };

            <partial name="_DetailsPartial" , model="@viewModel" />
        }
    }

    @if (Model.Clients != null)
    {
        @foreach (var client in Model.Clients)
        {
            var viewModel = new TrainerViewModel()
            {
                Id = client.Id,
                FirstName = client.FirstName,
                LastName = client.LastName,
                PhoneNumber = client.PhoneNumber,
                Email = client.Email,
            };

            <partial name="_DetailsPartial" , model="@viewModel" />
        }
    }

}
